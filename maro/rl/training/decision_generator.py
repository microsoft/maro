# Copyright (c) Microsoft Corporation.
# Licensed under the MIT license.

from abc import ABC, abstractmethod
from os import getcwd
from typing import Dict, List

from maro.rl.exploration import AbsExploration
from maro.rl.policy import AbsPolicy
from maro.utils import Logger


class AbsDecisionGenerator(ABC):
    def __init__(
        self,
        agent2policy: Dict[str, str],
        exploration_dict: Dict[str, AbsExploration] = None,
        agent2exploration: Dict[str, str] = None
    ):
        super().__init__()
        self.agent2policy = agent2policy
        self.exploration_dict = exploration_dict
        if self.exploration_dict:
            self.exploration_by_agent = {
                agent_id: exploration_dict[exploration_id] for agent_id, exploration_id in agent2exploration.items()
            }
        self.exploring = True  # Flag indicating that exploration is turned on.

    @abstractmethod
    def choose_action(self, state: dict, ep: int, step: int) -> dict:
        """Generate an action based on the given state.

        Args:
            state (dict): Dicitionary of agents' states based on which action decisions will be made.
            ep (int): Current episode.
            step (int): Current step.
        """
        raise NotImplementedError

    def exploration_step(self):
        for exploration in self.exploration_dict.values():
            exploration.step()
            print(f"epsilon: {exploration.epsilon}")

    def exploit(self):
        self.exploring = False

    def explore(self):
        self.exploring = True


class LocalDecisionGenerator(AbsDecisionGenerator):
    """Local decision generator.

    Args:
        agent2policy (Dict[str, str]): Mapping from agent ID's to policy ID's. This is used to direct an agent's
            queries to the correct policy.
        policies (List[AbsPolicy]): A list of policies for inference.
        log_dir (str): Directory to store logs in. A ``Logger`` will be created at init time and this directory
            will be used to save the log files generated by it. Defaults to the current working directory.
    """
    def __init__(
        self,
        agent2policy: Dict[str, str],
        policies: List[AbsPolicy],
        exploration_dict: Dict[str, AbsExploration] = None,
        agent2exploration: Dict[str, str] = None,
        log_dir: str = getcwd()
    ):
        super().__init__(agent2policy, exploration_dict=exploration_dict, agent2exploration=agent2exploration)
        self.policy_dict = {policy.name: policy for policy in policies}
        self.policy = {agent_id: self.policy_dict[policy_id] for agent_id, policy_id in self.agent2policy.items()}
        self._logger = Logger("local_decision_generator", dump_folder=log_dir)

    def choose_action(self, state: dict, ep: int, step: int) -> dict:
        """Generate an action based on the given state.

        Args:
            state (dict): Dicitionary of agents' states based on which action decisions will be made.
            ep (int): Current episode.
            step (int): Current step.
        """
        action_by_agent = {agent_id: self.policy[agent_id].choose_action(st) for agent_id, st in state.items()}
        if self.exploring and self.exploration_dict:
            for agent_id in action_by_agent:
                action_by_agent[agent_id] = self.exploration_by_agent[agent_id](action_by_agent[agent_id])

        return action_by_agent

    def store_experiences(self, exp_by_agent: dict) -> set:
        """Store agent experiences in the policies' experience managers."""
        policies_with_new_exp = set()
        for agent_id, exp in exp_by_agent.items():
            self.policy[agent_id].experience_manager.put(exp)
            policies_with_new_exp.add(self.agent2policy[agent_id])

        return policies_with_new_exp

    def get_experiences_by_policy(self, policy_names: List[str]):
        """Get experiences by policy names."""
        return {name: self.policy_dict[name].experience_manager.get() for name in policy_names}

    def update(self, policy_state_dict: dict):
        """Update policy states."""
        for policy_id, policy_state in policy_state_dict.items():
            self.policy_dict[policy_id].set_state(policy_state)

        if policy_state_dict:
            self._logger.info(f"updated policies {list(policy_state_dict.keys())}")
