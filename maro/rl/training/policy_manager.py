# Copyright (c) Microsoft Corporation.
# Licensed under the MIT license.

from abc import ABC, abstractmethod
from collections import defaultdict
from os import getcwd
from typing import Dict, List

from maro.rl.experience import ExperienceSet
from maro.rl.policy import AbsPolicy
from maro.utils import Logger


class AbsPolicyManager(ABC):
    """Controller for policy updates.

    The actual policy instances may reside here or be distributed on a set of remote nodes.
    """
    def __init__(self):
        pass

    @property
    @abstractmethod
    def names(self):
        """Return the list of policy names."""
        raise NotImplementedError

    @abstractmethod
    def on_experiences(self, exp_by_policy: Dict[str, ExperienceSet]):
        """Logic for handling incoming experiences is implemented here."""
        raise NotImplementedError

    @abstractmethod
    def get_state(self):
        """Return the latest policy states."""
        raise NotImplementedError


class LocalPolicyManager(AbsPolicyManager):
    """Policy manager that contains the actual policy instances.

    Args:
        policies (List[AbsPolicy]): A list of policies.
        log_dir (str): Directory to store logs in. A ``Logger`` with tag "LEARNER" will be created at init time
            and this directory will be used to save the log files generated by it. Defaults to the current working
            directory.
    """
    def __init__(self, policies: List[AbsPolicy], log_dir: str = getcwd()):
        super().__init__()
        self._names = [policy.name for policy in policies]
        self._logger = Logger("LOCAL_POLICY_MANAGER", dump_folder=log_dir)
        self.policy_dict = {policy.name: policy for policy in policies}
        self._new_exp_counter = defaultdict(int)
        self._updated_policy_ids = set()

    @property
    def names(self):
        return self._names

    def on_experiences(self, exp_by_policy: Dict[str, ExperienceSet]):
        """Store experiences and update policies if possible.

        The incoming experiences are expected to be grouped by policy ID and will be stored in the corresponding
        policy's experience manager. Policies whose update conditions have been met will then be updated.
        """
        for policy_id, exp in exp_by_policy.items():
            if self.policy_dict[policy_id].on_experiences(exp):
                self._updated_policy_ids.add(policy_id)

        if self._updated_policy_ids:
            self._logger.info(f"Updated policies {self._updated_policy_ids}")

    def get_state(self):
        """Return the states of updated policies since the last call."""
        policy_state_dict = {
            policy_id: self.policy_dict[policy_id].get_state() for policy_id in self._updated_policy_ids
        }
        self._updated_policy_ids.clear()
        return policy_state_dict
